{
	"info": {
		"_postman_id": "1c150b45-7d4a-4614-96cd-f863dfcb54ef",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19882951"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Проверить, что в body приходит правильный string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nikolay",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "43",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"// pm.test(\"Your test name\", function () {\r",
							"    \r",
							"//     pm.expect(jsonData.value).to.eql(100);\r",
							"// });\r",
							"\r",
							"//  let jsonData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"что name в ответе равно name s request\", function () {\r",
							"pm.expect(jsonData.name).to.eql(\"Nikolay\");\r",
							"})\r",
							"\r",
							" //5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"что age в ответе равно age s request\", function () {\r",
							"pm.expect(+jsonData.age).to.eql(43);\r",
							"})\r",
							"\r",
							" //6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"что salary в ответе равно salary s request\", function () {\r",
							"pm.expect(+jsonData.salary).to.eql(1000);\r",
							"})\r",
							"\r",
							"//7. Спарсить request.\r",
							"\r",
							"let req = request.data;// если запрос через form-data\r",
							"// let req = JSON.parse(request.data) -- если запрос через raw\r",
							"console.log(req)\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let req_name = req.name\r",
							"let resp_name = jsonData.name\r",
							"\r",
							"pm.test(\"name в ответе равно name s request (name забрать из request.)\", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let req_age = req.age\r",
							"let resp_age = jsonData.age\r",
							"\r",
							"pm.test(\"age в ответе равно age s request (age забрать из request.)\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let req_salary = req.salary\r",
							"let resp_salary = jsonData.salary\r",
							"\r",
							"pm.test(\"salary в ответе равно salary s request\", function () {\r",
							"    pm.expect(+req_salary).to.eql(resp_salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//12.Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"// let salary_1_5_chekc = req_salary * 4;\r",
							"// let u_salary_1_5 = jsonData.family.u_salary_1_5_year\r",
							"\r",
							"pm.test(\"u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\", function () {\r",
							"     pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary * 4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nikolay",
							"type": "text"
						},
						{
							"key": "age",
							"value": "43",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// let req = pm.request.url.query.all();//сапарсить request при get методе через url\r",
							"\r",
							"// let query = {};\r",
							"// pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"\r",
							"// pm.test(\"Your test name\", function () {\r",
							"//     pm.expect(jsonData.value).to.eql(100);\r",
							"// });\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name в ответе равно name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"что age в ответе равно age s request\", function () {\r",
							"pm.expect(jsonData.age).to.eql(req.age);\r",
							"})\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"что salary в ответе равно salary s request\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"})\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"у параметра dog есть параметры name\", function () {\r",
							"\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name')\r",
							"})\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"у параметра dog есть параметры age\", function () {\r",
							"\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age')\r",
							"})\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"параметр name имеет значение Luky\", function () {\r",
							"\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.deep.eql('Luky')\r",
							"})\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"параметр age имеет значение 4.\", function () {\r",
							"\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.deep.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Nikolay&age=43&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikolay"
						},
						{
							"key": "age",
							"value": "43"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let req = pm.request.url.query.toObject() \r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"name в ответе равно name s request\", function () {\r",
							"   pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"age в ответе равно age из request\", function () {\r",
							"   pm.expect(jsonData.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"0-й элемент параметра salary равен salary из request\", function () {\r",
							"   pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"0-й элемент параметра salary равен salary из request\", function () {\r",
							"   pm.expect(+jsonData.salary[1]).to.deep.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"0-й элемент параметра salary равен salary из request\", function () {\r",
							"   pm.expect(+jsonData.salary[2]).to.deep.eql(+req.salary*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name\", req.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set(\"age\", req.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (i = 0; i < jsonData.salary.length; i++){\r",
							"\t console.log(\"salary = \", jsonData.salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}:{{port}}/object_info_4?name=Nikolay&age=43&salary=1000",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikolay"
						},
						{
							"key": "age",
							"value": "43"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"let person = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let req = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", function () {\r",
							"\r",
							"    pm.expect(person).to.have.property('start_qa_salary')\r",
							"\r",
							"\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"\r",
							"    pm.expect(person).to.have.property('qa_salary_after_6_months')\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"\r",
							"    pm.expect(person).to.have.property('qa_salary_after_12_months')\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"\r",
							"    pm.expect(person).to.have.property('qa_salary_after_1.5_year')\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"\r",
							"    pm.expect(person).to.have.property('qa_salary_after_3.5_years')\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"json response имеет параметр person\", function () {\r",
							"\r",
							"    pm.expect(person).to.have.property('person')\r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"start_qa_salary равен salary из request\", function () {\r",
							"   pm.expect(person.start_qa_salary).to.deep.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"параметр qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"   pm.expect(person.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"   pm.expect(person[\"qa_salary_after_12_months\"]).to.eql(req.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"параметр qa_salary_after_1.5_year равен salary из request\", function(){\r",
							" pm.expect(person[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8\", function(){\r",
							" pm.expect(person[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"в параметре person, 1-й элемент из u_name равен salary из request\", function(){\r",
							" pm.expect(person.person.u_name[1]).to.deep.eql(+req.salary)\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"параметр qa_salary_after_1.5_year равен salary из request\", function(){\r",
							" pm.expect(person.person.u_age).to.deep.eql(+req.age)\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"параметр qa_salary_after_1.5_year равен salary из request\", function(){\r",
							" pm.expect(person.person.u_salary_5_years).to.eql(req.salary*4.2)\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							"\r",
							"for (i in person){\r",
							"\tconsole.log('Key = ', i, 'value =', person[i])\r",
							"}\r",
							"\r",
							"for (i in person.person){\r",
							"\tconsole.log('Key = ', i, 'value =', person.person[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}
